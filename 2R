#Создайте модель множественной линейной регрессии потоков паров воды за летний период 2013 года 
#по данным измерений методом турбулентной пульсации

#Настройка и проверка рабочей директории
getwd()
#очистим рабочую память
rm(list=ls())

#Подключим нужные пакеты
library(rnoaa)
library(tidyverse)
library(lubridate)
library(tidyr)
library(stringr)
library(dplyr)
library(tibble)
library(readr)

#Подготовка данных 
#Воспользуемся функцией read_csv из пакета read
tbl = read_csv("https://www.dropbox.com/s/erhs9hoj4vhrz0b/eddypro.csv?dl=1")
tbl
class(tbl)
#Представим нашу таблицу, пропустив 1 и 3 строчки, а также заменив значения -9999 символом NA
tbl = read_csv("eddypro.csv", skip = 1, na =c("","NA","-9999","-9999.0"), comment=c("["))
tbl

# посмотрим на сами переменные
glimpse(tbl)
# переменная roll содержит только NA, избавимся от нее с помощью функции select:
tbl = select(tbl, -(roll))
tbl
# много переменных типа char, которые содержат повторяющиеся значения, преобразуем их все в факторы:
tbl = tbl %>% mutate_if(is.character, factor)
# заменим ненужные нам символы:
names(tbl) =  str_replace_all(names(tbl), "[!]","_emph_")
# все имена таблицы должны быть некоторым вектором строк от  функции str_replace_all,заменяет в них все
#на “emph” и возвращает их в виде вектора. 
#нам нужно сделать такое последовательно много раз. Поэтому воспользуеися оператором пайппинга
names(tbl) = names(tbl) %>% 
  str_replace_all("[!]","_emph_") %>% 
  str_replace_all("[?]","_quest_") %>% 
  str_replace_all("[*]","_star_") %>% 
  str_replace_all("[+]","_plus_") %>%
  str_replace_all("[-]","_minus_") %>%
  str_replace_all("[@]","_at_") %>%
  str_replace_all("[$]","_dollar_") %>%
  str_replace_all("[#]","_hash_") %>%
  str_replace_all("[/]","_div_") %>%
  str_replace_all("[%]","_perc_") %>%
  str_replace_all("[&]","_amp_") %>%
  str_replace_all("[\\^]","_power_") %>%
  str_replace_all("[()]","_") 
glimpse(tbl)
#Функция cor работает только с численными данными, поэтому, чтобы перейти к корелляционному анализу 
#нужно выбрать все переменные типа numeric
sapply(tbl,is.numeric)
#Для каждой колонки таблицы мы получили значение правда, если она является численной и ложь, если не 
#является. Осталось подставить этот вектор в саму таблицу и получить таблицу состояющую только из 
#интересующих нас колонок
tbl_numeric = tbl[,sapply(tbl,is.numeric) ]
tbl_non_numeric = tbl[,!sapply(tbl,is.numeric) ]
#Теперь мы можем переходить к корелляционному анализу
cor_td = cor(tbl_numeric)
cor_td
#Ничего не вышло, проблема в том, что почти каждая из переменных содержит пропуски,
#нам необходимо избаиться от все строк где есть хоть одно значение NA. 
#Воспользуемся для этого готовой функцией drop_na()
cor_td = cor(drop_na(tbl_numeric))
cor_td
#Полученные результаты довольно тяжело интерпретировать т.к. они выдаются в виде матрицы, поэтому 
#преобразуем матрицу в таблицу, выберем интересующий нас столбец, а из него возьмем только те имена 
#строк(переменных) для которых значения коэффициента детерминации было больше 0,1
cor_td = cor(drop_na(tbl_numeric)) %>% as.data.frame %>% select(h2o_flux)
vars = row.names(cor_td)[cor_td$h2o_flux^2 > .1] %>% na.exclude
# Собрать все переменные из вектора с именнами переменных в одну формулу можно следующим образом:
formula = as.formula(paste("h2o_flux~", paste(vars,collapse = "+"), sep=""))
formula
#Создать произвольные(возможно пересекающиеся) обучающую и тестирующую выборки можно с помощью 
#команды sample_n из пакета dplyr
teaching_tbl = sample_n(tbl, floor(length(tbl$date)*.7))
testing_tbl = sample_n(tbl, floor(length(tbl$date)*.3))
#Если вы хотите сделать непересекающиеся подвыборки, то это можно сделать базовым набором функций
row_numbers = 1:length(tbl$date)
teach = sample(row_numbers, floor(length(tbl$date)*.7))
test = row_numbers[-teach]

teaching_tbl_unq = tbl[teach,]
testing_tbl_unq = tbl[test,]
